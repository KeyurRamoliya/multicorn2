SET client_min_messages=NOTICE;
CREATE FUNCTION costly_business(arg character varying, other_arg character varying) RETURNS character varying AS $$
BEGIN
  RAISE EXCEPTION 'This must be done by FDW!';
END;
$$ LANGUAGE plpgsql COST 200;
CREATE AGGREGATE public.push_me_down(arg character varying) (
  SFUNC = costly_business,
  STYPE = character varying
);
CREATE EXTENSION multicorn;
CREATE server multicorn_srv foreign data wrapper multicorn options (
    wrapper 'multicorn.testfdw.TestForeignDataWrapper'
);
CREATE foreign table testmulticorn (
    test1 character varying,
    test2 character varying
) server multicorn_srv options (
    option1 'option1',
    pushdown_upper_rel 'true'
);
-- query without upper rel
select test1 from testmulticorn WHERE test1 = 'test1 1 0';
NOTICE:  [('option1', 'option1'), ('pushdown_upper_rel', 'true')]
NOTICE:  [('test1', 'character varying'), ('test2', 'character varying')]
NOTICE:  [test1 = test1 1 0]
NOTICE:  Groups: 'None'
NOTICE:  Aggregations: 'None'
   test1   
-----------
 test1 1 0
(1 row)

-- simple group by
select test1 from testmulticorn GROUP BY test1;
NOTICE:  []
NOTICE:  Groups: '['test1']'
NOTICE:  Aggregations: '{'test1': AggCol(column='test1', function=None, function_schema=None)}'
   test1    
------------
 test1 1 0
 test1 2 1
 test1 3 2
 test1 1 3
 test1 2 4
 test1 3 5
 test1 1 6
 test1 2 7
 test1 3 8
 test1 1 9
 test1 2 10
 test1 3 11
 test1 1 12
 test1 2 13
 test1 3 14
 test1 1 15
 test1 2 16
 test1 3 17
 test1 1 18
 test1 2 19
(20 rows)

-- supported agg
select push_me_down(test2) from testmulticorn GROUP BY test1;
NOTICE:  []
NOTICE:  Groups: '['test1']'
NOTICE:  Aggregations: '{'#synth_column.0': AggCol(column='test2', function='push_me_down', function_schema='public'), 'test1': AggCol(column='test1', function=None, function_schema=None)}'
     push_me_down     
----------------------
 #synth_column.0 1 0
 #synth_column.0 3 1
 #synth_column.0 2 2
 #synth_column.0 1 3
 #synth_column.0 3 4
 #synth_column.0 2 5
 #synth_column.0 1 6
 #synth_column.0 3 7
 #synth_column.0 2 8
 #synth_column.0 1 9
 #synth_column.0 3 10
 #synth_column.0 2 11
 #synth_column.0 1 12
 #synth_column.0 3 13
 #synth_column.0 2 14
 #synth_column.0 1 15
 #synth_column.0 3 16
 #synth_column.0 2 17
 #synth_column.0 1 18
 #synth_column.0 3 19
(20 rows)

-- supported agg with single result
select push_me_down(test2) from testmulticorn;
NOTICE:  []
NOTICE:  Groups: 'None'
NOTICE:  Aggregations: '{'#synth_column.0': AggCol(column='test2', function='push_me_down', function_schema='public')}'
    push_me_down     
---------------------
 #synth_column.0 1 0
(1 row)

-- grouped column and aggregation mixed results
select test1, push_me_down(test2) from testmulticorn GROUP BY test1;
NOTICE:  []
NOTICE:  Groups: '['test1']'
NOTICE:  Aggregations: '{'#synth_column.0': AggCol(column='test2', function='push_me_down', function_schema='public'), 'test1': AggCol(column='test1', function=None, function_schema=None)}'
   test1    |     push_me_down     
------------+----------------------
 test1 1 0  | #synth_column.0 2 0
 test1 3 1  | #synth_column.0 1 1
 test1 2 2  | #synth_column.0 3 2
 test1 1 3  | #synth_column.0 2 3
 test1 3 4  | #synth_column.0 1 4
 test1 2 5  | #synth_column.0 3 5
 test1 1 6  | #synth_column.0 2 6
 test1 3 7  | #synth_column.0 1 7
 test1 2 8  | #synth_column.0 3 8
 test1 1 9  | #synth_column.0 2 9
 test1 3 10 | #synth_column.0 1 10
 test1 2 11 | #synth_column.0 3 11
 test1 1 12 | #synth_column.0 2 12
 test1 3 13 | #synth_column.0 1 13
 test1 2 14 | #synth_column.0 3 14
 test1 1 15 | #synth_column.0 2 15
 test1 3 16 | #synth_column.0 1 16
 test1 2 17 | #synth_column.0 3 17
 test1 1 18 | #synth_column.0 2 18
 test1 3 19 | #synth_column.0 1 19
(20 rows)

-- missing column in select
select test1 from testmulticorn GROUP BY test1, test2;
NOTICE:  []
NOTICE:  Groups: '['test1', 'test2']'
NOTICE:  Aggregations: '{'test1': AggCol(column='test1', function=None, function_schema=None), 'test2': AggCol(column='test2', function=None, function_schema=None)}'
   test1    
------------
 test1 1 0
 test1 3 1
 test1 2 2
 test1 1 3
 test1 3 4
 test1 2 5
 test1 1 6
 test1 3 7
 test1 2 8
 test1 1 9
 test1 3 10
 test1 2 11
 test1 1 12
 test1 3 13
 test1 2 14
 test1 1 15
 test1 3 16
 test1 2 17
 test1 1 18
 test1 3 19
(20 rows)

-- supported qual filter
select push_me_down(test2) from testmulticorn WHERE test1 = 'test1 1 0' GROUP BY test1;
NOTICE:  [test1 = test1 1 0]
NOTICE:  Groups: '['test1']'
NOTICE:  Aggregations: '{'#synth_column.0': AggCol(column='test2', function='push_me_down', function_schema='public'), 'test1': AggCol(column='test1', function=None, function_schema=None)}'
     push_me_down     
----------------------
 #synth_column.0 1 0
 #synth_column.0 3 1
 #synth_column.0 2 2
 #synth_column.0 1 3
 #synth_column.0 3 4
 #synth_column.0 2 5
 #synth_column.0 1 6
 #synth_column.0 3 7
 #synth_column.0 2 8
 #synth_column.0 1 9
 #synth_column.0 3 10
 #synth_column.0 2 11
 #synth_column.0 1 12
 #synth_column.0 3 13
 #synth_column.0 2 14
 #synth_column.0 1 15
 #synth_column.0 3 16
 #synth_column.0 2 17
 #synth_column.0 1 18
 #synth_column.0 3 19
(20 rows)

-- Unsupported aggregation function
select test1, array_agg(test2) from testmulticorn GROUP BY test1 ORDER BY 2;
NOTICE:  []
NOTICE:  Groups: 'None'
NOTICE:  Aggregations: 'None'
NOTICE:  requested sort(s): 
NOTICE:  SortKey(attname='test1', attnum=1, is_reversed=False, nulls_first=False, collate=None)
   test1    |   array_agg    
------------+----------------
 test1 3 1  | {"test2 1 1"}
 test1 3 10 | {"test2 1 10"}
 test1 3 13 | {"test2 1 13"}
 test1 3 16 | {"test2 1 16"}
 test1 3 19 | {"test2 1 19"}
 test1 3 4  | {"test2 1 4"}
 test1 3 7  | {"test2 1 7"}
 test1 1 0  | {"test2 2 0"}
 test1 1 12 | {"test2 2 12"}
 test1 1 15 | {"test2 2 15"}
 test1 1 18 | {"test2 2 18"}
 test1 1 3  | {"test2 2 3"}
 test1 1 6  | {"test2 2 6"}
 test1 1 9  | {"test2 2 9"}
 test1 2 11 | {"test2 3 11"}
 test1 2 14 | {"test2 3 14"}
 test1 2 17 | {"test2 3 17"}
 test1 2 2  | {"test2 3 2"}
 test1 2 5  | {"test2 3 5"}
 test1 2 8  | {"test2 3 8"}
(20 rows)

-- Unsupported qual operation
select test1, push_me_down(test2) from testmulticorn WHERE test2 > 'test2 2 9' GROUP BY test1;
NOTICE:  [test2 > test2 2 9]
NOTICE:  Groups: 'None'
NOTICE:  Aggregations: 'None'
NOTICE:  requested sort(s): 
NOTICE:  SortKey(attname='test1', attnum=1, is_reversed=False, nulls_first=False, collate=None)
ERROR:  This must be done by FDW!
CONTEXT:  PL/pgSQL function costly_business(character varying,character varying) line 3 at RAISE
-- having clause
select test1, push_me_down(test2) from testmulticorn GROUP BY test1 HAVING push_me_down(test2) = '#synth_column.0 2 0';
NOTICE:  []
NOTICE:  Groups: 'None'
NOTICE:  Aggregations: 'None'
NOTICE:  requested sort(s): 
NOTICE:  SortKey(attname='test1', attnum=1, is_reversed=False, nulls_first=False, collate=None)
ERROR:  This must be done by FDW!
CONTEXT:  PL/pgSQL function costly_business(character varying,character varying) line 3 at RAISE
DROP FOREIGN TABLE testmulticorn;
-- testing python sequence conversion
CREATE foreign table testmulticorn (
  test1 character varying[]
) server multicorn_srv options (
  test_type 'list',
  pushdown_upper_rel 'true'
);
-- direct query
SELECT test1 FROM testmulticorn;
NOTICE:  [('pushdown_upper_rel', 'true'), ('test_type', 'list')]
NOTICE:  [('test1', 'character varying[]')]
NOTICE:  []
NOTICE:  Groups: 'None'
NOTICE:  Aggregations: 'None'
                        test1                         
------------------------------------------------------
 {test1,1,0,"test1,\"0\"","{some value, \\\" ' 2}"}
 {test1,2,1,"test1,\"1\"","{some value, \\\" ' 2}"}
 {test1,3,2,"test1,\"2\"","{some value, \\\" ' 2}"}
 {test1,1,3,"test1,\"3\"","{some value, \\\" ' 2}"}
 {test1,2,4,"test1,\"4\"","{some value, \\\" ' 2}"}
 {test1,3,5,"test1,\"5\"","{some value, \\\" ' 2}"}
 {test1,1,6,"test1,\"6\"","{some value, \\\" ' 2}"}
 {test1,2,7,"test1,\"7\"","{some value, \\\" ' 2}"}
 {test1,3,8,"test1,\"8\"","{some value, \\\" ' 2}"}
 {test1,1,9,"test1,\"9\"","{some value, \\\" ' 2}"}
 {test1,2,10,"test1,\"10\"","{some value, \\\" ' 2}"}
 {test1,3,11,"test1,\"11\"","{some value, \\\" ' 2}"}
 {test1,1,12,"test1,\"12\"","{some value, \\\" ' 2}"}
 {test1,2,13,"test1,\"13\"","{some value, \\\" ' 2}"}
 {test1,3,14,"test1,\"14\"","{some value, \\\" ' 2}"}
 {test1,1,15,"test1,\"15\"","{some value, \\\" ' 2}"}
 {test1,2,16,"test1,\"16\"","{some value, \\\" ' 2}"}
 {test1,3,17,"test1,\"17\"","{some value, \\\" ' 2}"}
 {test1,1,18,"test1,\"18\"","{some value, \\\" ' 2}"}
 {test1,2,19,"test1,\"19\"","{some value, \\\" ' 2}"}
(20 rows)

-- group by query
SELECT test1 FROM testmulticorn GROUP BY test1;
NOTICE:  []
NOTICE:  Groups: '['test1']'
NOTICE:  Aggregations: '{'test1': AggCol(column='test1', function=None, function_schema=None)}'
                        test1                         
------------------------------------------------------
 {test1,1,0,"test1,\"0\"","{some value, \\\" ' 2}"}
 {test1,2,1,"test1,\"1\"","{some value, \\\" ' 2}"}
 {test1,3,2,"test1,\"2\"","{some value, \\\" ' 2}"}
 {test1,1,3,"test1,\"3\"","{some value, \\\" ' 2}"}
 {test1,2,4,"test1,\"4\"","{some value, \\\" ' 2}"}
 {test1,3,5,"test1,\"5\"","{some value, \\\" ' 2}"}
 {test1,1,6,"test1,\"6\"","{some value, \\\" ' 2}"}
 {test1,2,7,"test1,\"7\"","{some value, \\\" ' 2}"}
 {test1,3,8,"test1,\"8\"","{some value, \\\" ' 2}"}
 {test1,1,9,"test1,\"9\"","{some value, \\\" ' 2}"}
 {test1,2,10,"test1,\"10\"","{some value, \\\" ' 2}"}
 {test1,3,11,"test1,\"11\"","{some value, \\\" ' 2}"}
 {test1,1,12,"test1,\"12\"","{some value, \\\" ' 2}"}
 {test1,2,13,"test1,\"13\"","{some value, \\\" ' 2}"}
 {test1,3,14,"test1,\"14\"","{some value, \\\" ' 2}"}
 {test1,1,15,"test1,\"15\"","{some value, \\\" ' 2}"}
 {test1,2,16,"test1,\"16\"","{some value, \\\" ' 2}"}
 {test1,3,17,"test1,\"17\"","{some value, \\\" ' 2}"}
 {test1,1,18,"test1,\"18\"","{some value, \\\" ' 2}"}
 {test1,2,19,"test1,\"19\"","{some value, \\\" ' 2}"}
(20 rows)

DROP EXTENSION multicorn cascade;
NOTICE:  drop cascades to 2 other objects
DETAIL:  drop cascades to server multicorn_srv
drop cascades to foreign table testmulticorn
DROP AGGREGATE public.push_me_down(arg character varying);
DROP FUNCTION costly_business(arg character varying, other_arg character varying);
